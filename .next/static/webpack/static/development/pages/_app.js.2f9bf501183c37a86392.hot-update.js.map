{"version":3,"file":"static/webpack/static/development/pages/_app.js.2f9bf501183c37a86392.hot-update.js","sources":["webpack:///./contexts/PlayerContext.js","webpack:///./contexts/PlayerReducer.js","webpack:///./contexts/PlayerState.js","webpack:///./pages/_app.js"],"sourcesContent":["import { createContext } from 'react';\n\nexport const PlayerContext = createContext();","import {SET_CURRENT_SONG, TOGGLE_PLAYING} from './types'\n\nexport const PlayerReducer = (state, action) => {\n  switch (action.type) {\n    case SET_CURRENT_SONG:\n      return {\n        ...state,\n        currentSong: action.data,\n        playing: true\n      }\n    case TOGGLE_PLAYING:\n      return {\n        ...state,\n        playing: action.data\n      }\n    default:\n      return state\n  }\n}\n","import {useReducer} from 'react';\nimport {PlayerContext} from './PlayerContext'\nimport {PlayerReducer} from './PlayerReducer'\nimport {SET_CURRENT_SONG, TOGGLE_PLAYING} from './types'\n\n\nexport const PlayerState = props => {\n  const initialState = {\n    currentSong: 0,\n    // songs: songsArr,\n    playing: false,\n    audio: null,\n  }\n\n  const [state, dispatch] = useReducer(PlayerReducer, initialState)\n\n  const togglePlaying = () => dispatch({type: TOGGLE_PLAYING, data: state.playing ? false : true})\n\n  const SetCurrent = id => dispatch({type: SET_CURRENT_SONG, data: id })\n  \n  \n  return (\n    <PlayerContext.Provider \n      value={{ \n        currentSong: state.currentSong,\n        playing: state.playing,\n        audio: state.audio,\n        SetCurrent,\n        togglePlaying,\n\n      }}>\n      {props.children}\n    </PlayerContext.Provider>\n  );\n}\n","import {PlayerState} from '../contexts/PlayerState';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <PlayerContextProvider>\n      <Component {...pageProps} />\n    </PlayerContextProvider>\n  );\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAbA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAFA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}