{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_CURRENT_SONG, TOGGLE_PLAYING } from './types';\nexport default (function (state, action) {\n  switch (action.type) {\n    case SET_CURRENT_SONG:\n      return _objectSpread({}, state, {\n        currentSong: action.data,\n        playing: true\n      });\n\n    case TOGGLE_PLAYING:\n      return _objectSpread({}, state, {\n        playing: action.data\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/edgarlopez/Code/courses/react/next/podcasts/contexts/PlayerReducer.js"],"names":["SET_CURRENT_SONG","TOGGLE_PLAYING","state","action","type","currentSong","data","playing"],"mappings":";;;;;;AAAA,SAAQA,gBAAR,EAA0BC,cAA1B,QAA+C,SAA/C;AAEA,gBAAe,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,gBAAL;AACE,+BACKE,KADL;AAEEG,QAAAA,WAAW,EAAEF,MAAM,CAACG,IAFtB;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKN,cAAL;AACE,+BACKC,KADL;AAEEK,QAAAA,OAAO,EAAEJ,MAAM,CAACG;AAFlB;;AAIF;AACE,aAAOJ,KAAP;AAbJ;AAeD,CAhBD","sourcesContent":["import {SET_CURRENT_SONG, TOGGLE_PLAYING} from './types'\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_CURRENT_SONG:\n      return {\n        ...state,\n        currentSong: action.data,\n        playing: true\n      }\n    case TOGGLE_PLAYING:\n      return {\n        ...state,\n        playing: action.data\n      }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}