{"ast":null,"code":"var _jsxFileName = \"/Users/edgarlopez/Code/courses/react/next/podcasts/pages/[channel]/[podcast].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport { useContext, useState, useEffect } from 'react';\nimport { PlayerContext } from '../../contexts/PlayerContext';\nimport { useRouter } from 'next/router';\nimport { AudioPlayer } from '../../components/AudioPlayer'; // export async function getServerSideProps(context) {\n//   let idChannel = context.query.channel;\n//   let req = await fetch(\n//     `https://api.audioboom.com/channels/${idChannel}/audio_clips?version=2`\n//     );\n//   let data = await req.json()\n//   let audioClips = data.body.audio_clips;\n//   return {props: {audioClips}}\n// }\n\nexport default function podcast({\n  audioClips\n}) {\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    SetCurrentIndex,\n    SetPlaylist,\n    SetCurrent,\n    SetLoading,\n    playlist\n  } = useContext(PlayerContext); // useEffect(() => {\n  //   const setContextState = async () => {\n  //     if (playlist === null) {\n  //       SetPlaylist(audioClips)\n  //     }\n  //     for (let i = 0; i < audioClips.length; i++) {\n  //       if (router.query.podcast == audioClips[i].id) {\n  //         await SetCurrentIndex(i)\n  //         await SetCurrent(audioClips[i])\n  //         SetLoading(false)\n  //       }\n  //     }\n  //   }\n  //   setContextState()\n  // }, [])\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, \"...\");\n  }\n\n  return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, \"Hola\") // <AudioPlayer />\n  ;\n}","map":{"version":3,"sources":["/Users/edgarlopez/Code/courses/react/next/podcasts/pages/[channel]/[podcast].js"],"names":["useContext","useState","useEffect","PlayerContext","useRouter","AudioPlayer","podcast","audioClips","router","loading","setLoading","SetCurrentIndex","SetPlaylist","SetCurrent","SetLoading","playlist"],"mappings":";;;AAAA,OAAO,kBAAP;AACA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,8BAA5B,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAAiC;AAC9C,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM;AACJU,IAAAA,eADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA;AALI,MAMFf,UAAU,CAACG,aAAD,CANd,CAJ8C,CAY9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIM,OAAJ,EAAa;AACX,WAAO;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAEE;AAFF;AAID","sourcesContent":["import 'isomorphic-fetch';\nimport { useContext, useState, useEffect } from 'react';\nimport { PlayerContext } from '../../contexts/PlayerContext';\nimport { useRouter } from 'next/router';\nimport { AudioPlayer } from '../../components/AudioPlayer';\n\n// export async function getServerSideProps(context) {\n//   let idChannel = context.query.channel;\n\n//   let req = await fetch(\n//     `https://api.audioboom.com/channels/${idChannel}/audio_clips?version=2`\n//     );\n    \n//   let data = await req.json()\n//   let audioClips = data.body.audio_clips;\n  \n//   return {props: {audioClips}}\n// }\n\nexport default function podcast({ audioClips }) {\n  const router = useRouter();\n  const [loading, setLoading] = useState(false)\n\n  const {\n    SetCurrentIndex,\n    SetPlaylist,\n    SetCurrent,\n    SetLoading,\n    playlist,\n  } = useContext(PlayerContext);\n\n  // useEffect(() => {\n  //   const setContextState = async () => {\n  //     if (playlist === null) {\n  //       SetPlaylist(audioClips)\n  //     }\n  //     for (let i = 0; i < audioClips.length; i++) {\n  //       if (router.query.podcast == audioClips[i].id) {\n  //         await SetCurrentIndex(i)\n  //         await SetCurrent(audioClips[i])\n  //         SetLoading(false)\n  //       }\n  //     }\n  //   }\n  //   setContextState()\n  // }, [])\n  \n  if (loading) {\n    return <div className=\"modal\">...</div>\n  }\n  \n  return (\n    <h1>Hola</h1>\n    // <AudioPlayer />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}