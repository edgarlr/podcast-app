{"ast":null,"code":"var _jsxFileName = \"/Users/edgarlopez/Code/courses/react/next/podcasts/pages/[channel]/[podcast].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport { useContext, useState, useEffect } from 'react';\nimport { PlayerContext } from '../../contexts/PlayerContext';\nimport { useRouter } from 'next/router';\nimport { AudioPlayer } from '../../components/AudioPlayer';\nexport async function getServerSideProps(context) {\n  let idChannel = context.query.channel;\n  let req = await fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips?version=2`);\n  let data = await req.json();\n  let audioClips = data.body.audio_clips;\n  return {\n    props: {\n      audioClips\n    }\n  };\n}\nexport default function podcast({\n  audioClips\n}) {\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    SetCurrentIndex,\n    SetPlaylist,\n    SetCurrent,\n    currentSong,\n    currentSongIndex,\n    playing,\n    togglePlaying,\n    playlist\n  } = useContext(PlayerContext);\n  useEffect(() => {\n    const setContextState = async () => {\n      if (playlist === null) {\n        SetPlaylist(audioClips);\n      }\n\n      for (let i = 0; i < audioClips.length; i++) {\n        if (router.query.podcast == audioClips[i].id) {\n          await SetCurrentIndex(i);\n          await SetCurrent(audioClips[i]);\n          setLoading(false);\n        }\n      }\n    };\n\n    setContextState();\n  }, []);\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    }, \"...\");\n  }\n\n  return __jsx(AudioPlayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/edgarlopez/Code/courses/react/next/podcasts/pages/[channel]/[podcast].js"],"names":["useContext","useState","useEffect","PlayerContext","useRouter","AudioPlayer","getServerSideProps","context","idChannel","query","channel","req","fetch","data","json","audioClips","body","audio_clips","props","podcast","router","loading","setLoading","SetCurrentIndex","SetPlaylist","SetCurrent","currentSong","currentSongIndex","playing","togglePlaying","playlist","setContextState","i","length","id"],"mappings":";;;AAAA,OAAO,kBAAP;AACA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAEA,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,MAAIC,SAAS,GAAGD,OAAO,CAACE,KAAR,CAAcC,OAA9B;AAEA,MAAIC,GAAG,GAAG,MAAMC,KAAK,CAClB,sCAAqCJ,SAAU,wBAD7B,CAArB;AAIA,MAAIK,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAjB;AACA,MAAIC,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAUC,WAA3B;AAEA,SAAO;AAACC,IAAAA,KAAK,EAAE;AAACH,MAAAA;AAAD;AAAR,GAAP;AACD;AAED,eAAe,SAASI,OAAT,CAAiB;AAAEJ,EAAAA;AAAF,CAAjB,EAAiC;AAC9C,QAAMK,MAAM,GAAGhB,SAAS,EAAxB;AACA,QAAM;AAAA,OAACiB,OAAD;AAAA,OAAUC;AAAV,MAAwBrB,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAM;AACJsB,IAAAA,eADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,aAPI;AAQJC,IAAAA;AARI,MASF9B,UAAU,CAACG,aAAD,CATd;AAWAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,eAAe,GAAG,YAAY;AAClC,UAAID,QAAQ,KAAK,IAAjB,EAAuB;AACrBN,QAAAA,WAAW,CAACT,UAAD,CAAX;AACD;;AACD,WAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,UAAU,CAACkB,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,YAAIZ,MAAM,CAACX,KAAP,CAAaU,OAAb,IAAwBJ,UAAU,CAACiB,CAAD,CAAV,CAAcE,EAA1C,EAA8C;AAC5C,gBAAMX,eAAe,CAACS,CAAD,CAArB;AACA,gBAAMP,UAAU,CAACV,UAAU,CAACiB,CAAD,CAAX,CAAhB;AACAV,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;AACF,KAXD;;AAYAS,IAAAA,eAAe;AAChB,GAdQ,EAcN,EAdM,CAAT;;AAgBA,MAAIV,OAAJ,EAAa;AACX,WAAO;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,SACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD","sourcesContent":["import 'isomorphic-fetch';\nimport { useContext, useState, useEffect } from 'react';\nimport { PlayerContext } from '../../contexts/PlayerContext';\nimport { useRouter } from 'next/router';\nimport { AudioPlayer } from '../../components/AudioPlayer';\n\nexport async function getServerSideProps(context) {\n  let idChannel = context.query.channel;\n\n  let req = await fetch(\n    `https://api.audioboom.com/channels/${idChannel}/audio_clips?version=2`\n    );\n    \n  let data = await req.json()\n  let audioClips = data.body.audio_clips;\n  \n  return {props: {audioClips}}\n}\n\nexport default function podcast({ audioClips }) {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true)\n\n  const {\n    SetCurrentIndex,\n    SetPlaylist,\n    SetCurrent,\n    currentSong,\n    currentSongIndex,\n    playing,\n    togglePlaying,\n    playlist\n  } = useContext(PlayerContext);\n\n  useEffect(() => {\n    const setContextState = async () => {\n      if (playlist === null) {\n        SetPlaylist(audioClips)\n      }\n      for (let i = 0; i < audioClips.length; i++) {\n        if (router.query.podcast == audioClips[i].id) {\n          await SetCurrentIndex(i)\n          await SetCurrent(audioClips[i])\n          setLoading(false)\n        }\n      }\n    }\n    setContextState()\n  }, [])\n  \n  if (loading) {\n    return <div className=\"modal\">...</div>\n  }\n  \n  return (\n    <AudioPlayer />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}