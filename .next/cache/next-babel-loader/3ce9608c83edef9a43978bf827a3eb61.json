{"ast":null,"code":"var _jsxFileName = \"/Users/edgarlopez/Code/courses/react/next/podcasts/contexts/PlayerState.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useReducer } from 'react';\nimport { PlayerContext } from './PlayerContext';\nimport { PlayerReducer } from './PlayerReducer';\nimport { SET_CURRENT_SONG, SET_CURRENT_SONG_INDEX, TOGGLE_PLAYING, SET_PLAYLIST } from './types';\nexport const PlayerState = props => {\n  const initialState = {\n    currentSong: 0,\n    currentSongIndex: null,\n    playlist: null,\n    playing: false,\n    audio: null\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(PlayerReducer, initialState);\n\n  const SetCurrent = currentSong => dispatch({\n    type: SET_CURRENT_SONG,\n    data: currentSong\n  });\n\n  const SetCurrentIndex = index => dispatch({\n    type: SET_CURRENT_SONG_INDEX,\n    data: index\n  });\n\n  const SetPlaylist = playlistArray => dispatch({\n    type: SET_PLAYLIST,\n    data: playlistArray\n  });\n\n  const togglePlaying = () => dispatch({\n    type: TOGGLE_PLAYING,\n    data: state.playing ? false : true\n  });\n\n  const prevSong = () => {\n    console.log('hola');\n  };\n\n  return __jsx(PlayerContext.Provider, {\n    value: {\n      currentSong: state.currentSong,\n      currentSongIndex: state.currentSongIndex,\n      playlist: state.playlist,\n      playing: state.playing,\n      audio: state.audio,\n      SetCurrent,\n      SetCurrentIndex,\n      SetPlaylist,\n      togglePlaying\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/edgarlopez/Code/courses/react/next/podcasts/contexts/PlayerState.js"],"names":["useReducer","PlayerContext","PlayerReducer","SET_CURRENT_SONG","SET_CURRENT_SONG_INDEX","TOGGLE_PLAYING","SET_PLAYLIST","PlayerState","props","initialState","currentSong","currentSongIndex","playlist","playing","audio","state","dispatch","SetCurrent","type","data","SetCurrentIndex","index","SetPlaylist","playlistArray","togglePlaying","prevSong","console","log","children"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SACEC,gBADF,EAEEC,sBAFF,EAGEC,cAHF,EAIEC,YAJF,QAKO,SALP;AAOA,OAAO,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAClC,QAAMC,YAAY,GAAG;AACnBC,IAAAA,WAAW,EAAE,CADM;AAEnBC,IAAAA,gBAAgB,EAAE,IAFC;AAGnBC,IAAAA,QAAQ,EAAE,IAHS;AAInBC,IAAAA,OAAO,EAAE,KAJU;AAKnBC,IAAAA,KAAK,EAAE;AALY,GAArB;AAQA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBhB,UAAU,CAACE,aAAD,EAAgBO,YAAhB,CAApC;;AAEA,QAAMQ,UAAU,GAAGP,WAAW,IAAIM,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEf,gBAAP;AAAyBgB,IAAAA,IAAI,EAAET;AAA/B,GAAD,CAA1C;;AAEA,QAAMU,eAAe,GAAGC,KAAK,IAAIL,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEd,sBAAP;AAA+Be,IAAAA,IAAI,EAAEE;AAArC,GAAD,CAAzC;;AAEA,QAAMC,WAAW,GAAGC,aAAa,IAAIP,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEZ,YAAP;AAAqBa,IAAAA,IAAI,EAAEI;AAA3B,GAAD,CAA7C;;AAEA,QAAMC,aAAa,GAAG,MAAMR,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEb,cAAP;AAAuBc,IAAAA,IAAI,EAAEJ,KAAK,CAACF,OAAN,GAAgB,KAAhB,GAAwB;AAArD,GAAD,CAApC;;AAEA,QAAMY,QAAQ,GAAG,MAAM;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAFD;;AAIA,SACE,MAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLjB,MAAAA,WAAW,EAAEK,KAAK,CAACL,WADd;AAELC,MAAAA,gBAAgB,EAAEI,KAAK,CAACJ,gBAFnB;AAGLC,MAAAA,QAAQ,EAAEG,KAAK,CAACH,QAHX;AAILC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAJV;AAKLC,MAAAA,KAAK,EAAEC,KAAK,CAACD,KALR;AAMLG,MAAAA,UANK;AAOLG,MAAAA,eAPK;AAQLE,MAAAA,WARK;AASLE,MAAAA;AATK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGhB,KAAK,CAACoB,QAbT,CADF;AAiBD,CAxCM","sourcesContent":["import {useReducer} from 'react';\nimport {PlayerContext} from './PlayerContext'\nimport {PlayerReducer} from './PlayerReducer'\nimport {\n  SET_CURRENT_SONG,\n  SET_CURRENT_SONG_INDEX,\n  TOGGLE_PLAYING,\n  SET_PLAYLIST,\n} from './types';\n\nexport const PlayerState = props => {\n  const initialState = {\n    currentSong: 0,\n    currentSongIndex: null,\n    playlist: null,\n    playing: false,\n    audio: null,\n  }\n\n  const [state, dispatch] = useReducer(PlayerReducer, initialState)\n\n  const SetCurrent = currentSong => dispatch({type: SET_CURRENT_SONG, data: currentSong })\n\n  const SetCurrentIndex = index => dispatch({type: SET_CURRENT_SONG_INDEX, data: index })\n\n  const SetPlaylist = playlistArray => dispatch({type: SET_PLAYLIST, data: playlistArray})\n\n  const togglePlaying = () => dispatch({type: TOGGLE_PLAYING, data: state.playing ? false : true})\n\n  const prevSong = () => {\n    console.log('hola');\n  }\n  \n  return (\n    <PlayerContext.Provider\n      value={{\n        currentSong: state.currentSong,\n        currentSongIndex: state.currentSongIndex,\n        playlist: state.playlist,\n        playing: state.playing,\n        audio: state.audio,\n        SetCurrent,\n        SetCurrentIndex,\n        SetPlaylist,\n        togglePlaying,\n      }}\n    >\n      {props.children}\n    </PlayerContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}