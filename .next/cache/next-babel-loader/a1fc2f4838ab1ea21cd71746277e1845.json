{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/edgarlopez/Code/courses/react/next/podcasts/contexts/PlayerState.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useReducer } from 'react';\nimport { PlayerContext } from './PlayerContext';\nimport { PlayerReducer } from './PlayerReducer';\nimport { SET_CURRENT_SONG, SET_CURRENT_SONG_ID, TOGGLE_PLAYING, SET_PLAYLIST } from './types';\nexport var PlayerState = function PlayerState(props) {\n  var initialState = {\n    currentSong: 0,\n    currentSongId: null,\n    playlist: null,\n    playing: false,\n    audio: null\n  };\n\n  var _useReducer = useReducer(PlayerReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var SetCurrent = function SetCurrent(currentSong) {\n    return dispatch({\n      type: SET_CURRENT_SONG,\n      data: currentSong\n    });\n  };\n\n  var SetCurrentId = function SetCurrentId(id) {\n    return dispatch({\n      type: SET_CURRENT_SONG_ID,\n      data: id\n    });\n  };\n\n  var togglePlaying = function togglePlaying() {\n    return dispatch({\n      type: TOGGLE_PLAYING,\n      data: state.playing ? false : true\n    });\n  };\n\n  return __jsx(PlayerContext.Provider, {\n    value: {\n      currentSong: state.currentSong,\n      currentSongId: state.currentSongId,\n      playlist: state.playlist,\n      playing: state.playing,\n      audio: state.audio,\n      SetCurrent: SetCurrent,\n      SetCurrentId: SetCurrentId,\n      togglePlaying: togglePlaying\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/edgarlopez/Code/courses/react/next/podcasts/contexts/PlayerState.js"],"names":["useReducer","PlayerContext","PlayerReducer","SET_CURRENT_SONG","SET_CURRENT_SONG_ID","TOGGLE_PLAYING","SET_PLAYLIST","PlayerState","props","initialState","currentSong","currentSongId","playlist","playing","audio","state","dispatch","SetCurrent","type","data","SetCurrentId","id","togglePlaying","children"],"mappings":";;;;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,cAHF,EAIEC,YAJF,QAKO,SALP;AAQA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAClC,MAAMC,YAAY,GAAG;AACnBC,IAAAA,WAAW,EAAE,CADM;AAEnBC,IAAAA,aAAa,EAAE,IAFI;AAGnBC,IAAAA,QAAQ,EAAE,IAHS;AAInBC,IAAAA,OAAO,EAAE,KAJU;AAKnBC,IAAAA,KAAK,EAAE;AALY,GAArB;;AADkC,oBASRd,UAAU,CAACE,aAAD,EAAgBO,YAAhB,CATF;AAAA,MAS3BM,KAT2B;AAAA,MASpBC,QAToB;;AAWlC,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAP,WAAW;AAAA,WAAIM,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEf,gBAAP;AAAyBgB,MAAAA,IAAI,EAAET;AAA/B,KAAD,CAAZ;AAAA,GAA9B;;AAEA,MAAMU,YAAY,GAAG,SAAfA,YAAe,CAAAC,EAAE;AAAA,WAAIL,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEd,mBAAP;AAA4Be,MAAAA,IAAI,EAAEE;AAAlC,KAAD,CAAZ;AAAA,GAAvB;;AAEA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMN,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEb,cAAP;AAAuBc,MAAAA,IAAI,EAAEJ,KAAK,CAACF,OAAN,GAAgB,KAAhB,GAAwB;AAArD,KAAD,CAAd;AAAA,GAAtB;;AAIA,SACE,MAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,WAAW,EAAEK,KAAK,CAACL,WADd;AAELC,MAAAA,aAAa,EAAEI,KAAK,CAACJ,aAFhB;AAGLC,MAAAA,QAAQ,EAAEG,KAAK,CAACH,QAHX;AAILC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAJV;AAKLC,MAAAA,KAAK,EAAEC,KAAK,CAACD,KALR;AAMLG,MAAAA,UAAU,EAAVA,UANK;AAOLG,MAAAA,YAAY,EAAZA,YAPK;AAQLE,MAAAA,aAAa,EAAbA;AARK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGd,KAAK,CAACe,QAZT,CADF;AAgBD,CAnCM","sourcesContent":["import {useReducer} from 'react';\nimport {PlayerContext} from './PlayerContext'\nimport {PlayerReducer} from './PlayerReducer'\nimport {\n  SET_CURRENT_SONG,\n  SET_CURRENT_SONG_ID,\n  TOGGLE_PLAYING,\n  SET_PLAYLIST,\n} from './types';\n\n\nexport const PlayerState = props => {\n  const initialState = {\n    currentSong: 0,\n    currentSongId: null,\n    playlist: null,\n    playing: false,\n    audio: null,\n  }\n\n  const [state, dispatch] = useReducer(PlayerReducer, initialState)\n\n  const SetCurrent = currentSong => dispatch({type: SET_CURRENT_SONG, data: currentSong })\n\n  const SetCurrentId = id => dispatch({type: SET_CURRENT_SONG_ID, data: id })\n\n  const togglePlaying = () => dispatch({type: TOGGLE_PLAYING, data: state.playing ? false : true})\n\n  \n  \n  return (\n    <PlayerContext.Provider\n      value={{\n        currentSong: state.currentSong,\n        currentSongId: state.currentSongId,\n        playlist: state.playlist,\n        playing: state.playing,\n        audio: state.audio,\n        SetCurrent,\n        SetCurrentId,\n        togglePlaying,\n      }}\n    >\n      {props.children}\n    </PlayerContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}