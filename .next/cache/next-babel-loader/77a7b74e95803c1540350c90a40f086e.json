{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/edgarlopez/Code/courses/react/next/podcasts/pages/[channel]/[podcast].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport Link from 'next/link';\nimport AudioControls from '../../components/AudioControls';\nimport { MdKeyboardArrowLeft } from 'react-icons/md';\nimport TranslucentImage from '../../components/TranslucentImage';\nimport { useContext, useState, useEffect } from 'react';\nimport { PlayerContext } from '../../contexts/PlayerContext';\nimport { useRouter } from 'next/router';\nimport { AudioPlayer } from '../../components/AudioPlayer';\nexport var __N_SSP = true;\nexport default function podcast(_ref) {\n  var audioClips = _ref.audioClips;\n  var router = useRouter();\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useContext = useContext(PlayerContext),\n      SetCurrentIndex = _useContext.SetCurrentIndex,\n      SetPlaylist = _useContext.SetPlaylist,\n      SetCurrent = _useContext.SetCurrent,\n      currentSong = _useContext.currentSong,\n      currentSongIndex = _useContext.currentSongIndex,\n      playing = _useContext.playing,\n      togglePlaying = _useContext.togglePlaying,\n      playlist = _useContext.playlist;\n\n  useEffect(function () {\n    var setContextState = function setContextState() {\n      var i;\n      return _regeneratorRuntime.async(function setContextState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (playlist === null) {\n                SetPlaylist(audioClips);\n              }\n\n              i = 0;\n\n            case 2:\n              if (!(i < audioClips.length)) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!(router.query.podcast == audioClips[i].id)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(SetCurrentIndex(i));\n\n            case 6:\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(SetCurrent(audioClips[i]));\n\n            case 8:\n              setLoading(false);\n\n            case 9:\n              i++;\n              _context.next = 2;\n              break;\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    setContextState();\n  }, []);\n  useEffect(function () {\n    if (playlist !== null) {\n      var updateContextState = function updateContextState() {\n        var i;\n        return _regeneratorRuntime.async(function updateContextState$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setLoading(true);\n                i = 0;\n\n              case 2:\n                if (!(i < playlist.length)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                if (!(currentSongIndex == i)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 6;\n                return _regeneratorRuntime.awrap(SetCurrent(playlist[i]));\n\n              case 6:\n                setLoading(false);\n\n              case 7:\n                i++;\n                _context2.next = 2;\n                break;\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      updateContextState();\n    }\n  }, [currentSongIndex]);\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 12\n      }\n    }, \"...\");\n  }\n\n  return __jsx(AudioPlayer, {\n    handlePrevClick: handlePrevClick,\n    currentSong: currentSong,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/edgarlopez/Code/courses/react/next/podcasts/pages/[channel]/[podcast].js"],"names":["Link","AudioControls","MdKeyboardArrowLeft","TranslucentImage","useContext","useState","useEffect","PlayerContext","useRouter","AudioPlayer","podcast","audioClips","router","loading","setLoading","SetCurrentIndex","SetPlaylist","SetCurrent","currentSong","currentSongIndex","playing","togglePlaying","playlist","setContextState","i","length","query","id","updateContextState","handlePrevClick"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\nimport Link from 'next/link';\nimport AudioControls from '../../components/AudioControls';\nimport { MdKeyboardArrowLeft } from 'react-icons/md';\nimport TranslucentImage from '../../components/TranslucentImage';\nimport { useContext, useState, useEffect } from 'react';\nimport { PlayerContext } from '../../contexts/PlayerContext';\nimport { useRouter } from 'next/router';\nimport { AudioPlayer } from '../../components/AudioPlayer';\n\nexport async function getServerSideProps(context) {\n  let idChannel = context.query.channel;\n\n  let req = await fetch(\n    `https://api.audioboom.com/channels/${idChannel}/audio_clips?version=2`\n    );\n    \n  let data = await req.json()\n  let audioClips = data.body.audio_clips;\n  \n  return {props: {audioClips}}\n}\n\nexport default function podcast({ audioClips }) {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true)\n\n  const {\n    SetCurrentIndex,\n    SetPlaylist,\n    SetCurrent,\n    currentSong,\n    currentSongIndex,\n    playing,\n    togglePlaying,\n    playlist\n  } = useContext(PlayerContext);\n\n  useEffect(() => {\n    const setContextState = async () => {\n      if (playlist === null) {\n        SetPlaylist(audioClips)\n      }\n      for (let i = 0; i < audioClips.length; i++) {\n        if (router.query.podcast == audioClips[i].id) {\n          await SetCurrentIndex(i)\n          await SetCurrent(audioClips[i])\n          setLoading(false)\n        }\n      }\n    }\n    setContextState()\n  }, [])\n\n  useEffect(() => {\n    if (playlist !== null) {\n      const updateContextState = async () => {\n        setLoading(true)\n        for (let i = 0; i < playlist.length; i++) {\n          if (currentSongIndex == i) {\n            await SetCurrent(playlist[i])\n            setLoading(false)\n          }\n        }\n      }\n      updateContextState()\n    }\n  }, [currentSongIndex])\n\n  \n  if (loading) {\n    return <div className=\"modal\">...</div>\n  }\n  \n  return (\n    <AudioPlayer handlePrevClick={handlePrevClick} currentSong={currentSong} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}